### 数据库连接配置 ###
# PostgreSQL 数据库连接字符串
jdbc.driverClassName=org.postgresql.Driver
jdbc.url=jdbc\:postgresql\://115.159.187.129\:5432/dyj
jdbc.userName=postgres
jdbc.password=1qaz@WSX

### c3p0 数据库连接池配置 ###
# 连接池中保留的最小连接数
c3p0.minPoolSize=1
# 连接池中保留的最大连接数。默认：15
c3p0.maxPoolSize=2
# 初始化时获取三个连接，取值应在 minPoolSize 与 maxPoolSize 之间。默认：3
c3p0.initialPoolSize=3
# 最大空闲时间（秒），未使用则连接被丢弃。若为 0 则永不丢弃。默认：0
c3p0.maxIdleTime=30000
# 当连接池中的连接耗尽的时候 c3p0 一次同时获取的连接数。默认：3
c3p0.acquireIncrement=3
# JDBC 的标准参数，用以控制数据源内加载的 PreparedStatements 数量
c3p0.maxStatements=1000
# 连接池内单个连接所拥有的最大缓存 statements 数。与 maxStatements 值都为 0 时，则缓存被关闭。默认：0
c3p0.maxStatementsPerConnection=0
# 每隔多少秒检查所有连接池中的空闲连接。默认：0
c3p0.idleConnectionTestPeriod=18000
# 定义在从数据库获取新连接失败后重复尝试的次数。默认：30
c3p0.acquireRetryAttempts=30
# 两次连接中间隔时间，单位毫秒。默认：1000-->
c3p0.acquireRetryDelay=1000
# 连接关闭时默认将所有未提交的操作回滚。默认：false
c3p0.autoCommitOnClose=false
# 获取连接失败时是否永久断开和关闭数据源。false时数据源仍有效保留，并在下次调用 getConnection() 的时候继续尝试获取连接。默认：false
c3p0.breakAfterAcquireFailure=true
# 当连接池用完时，客户端调用 getConnection() 后等待获取新连接的时间，超时后将抛出 SQLException，如设为 0 则无限期等待。单位毫秒。默认：0
c3p0.checkoutTimeout=10000
# c3p0 是异步操作的，缓慢的 JDBC 操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。默认：3
c3p0.numHelperThreads=3
# 新建一张空表（表名为此项的值），并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张表上进行任何操作，默认：null
c3p0.automaticTestTable=test_t_c3p0
# 在每个 connection 提交的时候都将校验其有效性。资源消耗过大建议关闭，建议使用 idleConnectionTestPeriod 或 automaticTestTable 等方法来提升连接测试的性能
c3p0.testConnectionOnCheckout=false
# 如果设为 true 那么在取得连接的同时将校验连接的有效性。默认：false
c3p0.testConnectionOnCheckin=false

### 配置 Hibernate ###
# 数据库方言
hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
# hibernate 实体扫描路径
hibernate.packagesToScan=com.dyj.**.entity
# Oracle 空间数据操作支持
#hibernate.spatial.connection_finder=cn.swsk.framework.data.hibernate.spatial.OracleConnectionFinder
# 是否输出所有 SQL 语句到控制台。生产模式应设为 false
hibernate.showSql=false
# 是否在 log 和 console 中打印出更好看的SQL命令。生产模式应设为 false
hibernate.formatSql=true
# 是否在 SQL 中生成有助于调试的注释信息。生产模式应设为 false
hibernate.useSqlComments=false
# 在 SessionFactory 创建时，自动检查数据库结构。取值 validate|update|create|create-drop。生产模式应设为 validate
hibernate.hbm2ddl.auto=update
# 为单向关联（一对一、多对一）的外连接抓取（outerjoinfetch）树设置最大深度。值为 0 意味着将关闭默认的外连接抓取。建议取值 0~3
hibernate.maxFetchDepth=2
# 关联的批量抓取设置默认数量。建议的取值为 4、8 和 16
hibernate.defaultBatchFetchSize=8
# 读取数据库时，每次取出的记录条数。此设置不支持 MySQL。非零值，默认：10
hibernate.jdbc.fetchSize=50
# 批量增删改时，每次操作的记录条数。非零值，建议值为 5~30
hibernate.jdbc.batchSize=25
# 将 Hibernate 的 getCurrentSession() 方法获取的 Session 交给 Spring 管理，否则 Session 会报异常
hibernate.currentSessionContextClass=org.springframework.orm.hibernate5.SpringSessionContext
# 是否允许 Hibernate 用 JDBC 的可滚动的结果集，用于分页优化
hibernate.jdbc.useScrollableResultset=false
# 是否允许查询缓存，需要 SQL 语句完全一致，并且需要显式设置 setCacheable(true) 才能生效，所以建议关闭，只使用二级缓存
hibernate.cache.useQueryCache=false
# 是否开启 Hibernate 二级缓存。可以在需要缓存的实体类中标注 @Cache 注释
hibernate.cache.useSecondLevelCache=true
# 强制 Hibernate 以更人性化的格式将数据存入二级缓存
hibernate.cache.useStructuredEntries=true
# 设置缓存实现（Hibernate 4 之后使用此配置）
hibernate.cache.region.factoryClass=org.hibernate.cache.ehcache.EhCacheRegionFactory
